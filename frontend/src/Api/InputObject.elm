-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs


buildAuthorizationInput :
    AuthorizationInputRequiredFields
    -> (AuthorizationInputOptionalFields -> AuthorizationInputOptionalFields)
    -> AuthorizationInput
buildAuthorizationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { application = Absent, status = Absent }
    in
    { id = required____.id, application = optionals____.application, scopes = required____.scopes, status = optionals____.status, subject = required____.subject, creationDate = required____.creationDate, type_ = required____.type_ }


type alias AuthorizationInputRequiredFields =
    { id : ScalarCodecs.Uuid
    , scopes : List (Maybe String)
    , subject : List String
    , creationDate : List String
    , type_ : String
    }


type alias AuthorizationInputOptionalFields =
    { application : OptionalArgument ClientInput
    , status : OptionalArgument String
    }


{-| Type for the AuthorizationInput input object.
-}
type alias AuthorizationInput =
    { id : ScalarCodecs.Uuid
    , application : OptionalArgument ClientInput
    , scopes : List (Maybe String)
    , status : OptionalArgument String
    , subject : List String
    , creationDate : List String
    , type_ : String
    }


{-| Encode a AuthorizationInput into a value that can be used as an argument.
-}
encodeAuthorizationInput : AuthorizationInput -> Value
encodeAuthorizationInput input____ =
    Encode.maybeObject
        [ ( "id", (ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ), ( "application", encodeClientInput |> Encode.optional input____.application ), ( "scopes", (Encode.string |> Encode.maybe |> Encode.list) input____.scopes |> Just ), ( "status", Encode.string |> Encode.optional input____.status ), ( "subject", (Encode.string |> Encode.list) input____.subject |> Just ), ( "creationDate", (Encode.string |> Encode.list) input____.creationDate |> Just ), ( "type", Encode.string input____.type_ |> Just ) ]


buildClaimInput :
    ClaimInputRequiredFields
    -> ClaimInput
buildClaimInput required____ =
    { id = required____.id, name = required____.name, description = required____.description, value = required____.value }


type alias ClaimInputRequiredFields =
    { id : ScalarCodecs.Uuid
    , name : String
    , description : String
    , value : String
    }


{-| Type for the ClaimInput input object.
-}
type alias ClaimInput =
    { id : ScalarCodecs.Uuid
    , name : String
    , description : String
    , value : String
    }


{-| Encode a ClaimInput into a value that can be used as an argument.
-}
encodeClaimInput : ClaimInput -> Value
encodeClaimInput input____ =
    Encode.maybeObject
        [ ( "id", (ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ), ( "name", Encode.string input____.name |> Just ), ( "description", Encode.string input____.description |> Just ), ( "value", Encode.string input____.value |> Just ) ]


buildClientInput :
    ClientInputRequiredFields
    -> (ClientInputOptionalFields -> ClientInputOptionalFields)
    -> ClientInput
buildClientInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { permissions = Absent, postLogoutRedirectUris = Absent, redirectUris = Absent, type_ = Absent }
    in
    { clientId = required____.clientId, clientSecret = required____.clientSecret, displayName = required____.displayName, permissions = optionals____.permissions, postLogoutRedirectUris = optionals____.postLogoutRedirectUris, redirectUris = optionals____.redirectUris, type_ = optionals____.type_, requirePkce = required____.requirePkce, requireConsent = required____.requireConsent }


type alias ClientInputRequiredFields =
    { clientId : String
    , clientSecret : String
    , displayName : String
    , requirePkce : Bool
    , requireConsent : Bool
    }


type alias ClientInputOptionalFields =
    { permissions : OptionalArgument (List String)
    , postLogoutRedirectUris : OptionalArgument (List String)
    , redirectUris : OptionalArgument (List String)
    , type_ : OptionalArgument String
    }


{-| Type for the ClientInput input object.
-}
type alias ClientInput =
    { clientId : String
    , clientSecret : String
    , displayName : String
    , permissions : OptionalArgument (List String)
    , postLogoutRedirectUris : OptionalArgument (List String)
    , redirectUris : OptionalArgument (List String)
    , type_ : OptionalArgument String
    , requirePkce : Bool
    , requireConsent : Bool
    }


{-| Encode a ClientInput into a value that can be used as an argument.
-}
encodeClientInput : ClientInput -> Value
encodeClientInput input____ =
    Encode.maybeObject
        [ ( "clientId", Encode.string input____.clientId |> Just ), ( "clientSecret", Encode.string input____.clientSecret |> Just ), ( "displayName", Encode.string input____.displayName |> Just ), ( "permissions", (Encode.string |> Encode.list) |> Encode.optional input____.permissions ), ( "postLogoutRedirectUris", (Encode.string |> Encode.list) |> Encode.optional input____.postLogoutRedirectUris ), ( "redirectUris", (Encode.string |> Encode.list) |> Encode.optional input____.redirectUris ), ( "type", Encode.string |> Encode.optional input____.type_ ), ( "requirePkce", Encode.bool input____.requirePkce |> Just ), ( "requireConsent", Encode.bool input____.requireConsent |> Just ) ]


buildScopeInput :
    ScopeInputRequiredFields
    -> (ScopeInputOptionalFields -> ScopeInputOptionalFields)
    -> ScopeInput
buildScopeInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { description = Absent, resources = Absent }
    in
    { id = required____.id, name = required____.name, displayName = required____.displayName, description = optionals____.description, resources = optionals____.resources }


type alias ScopeInputRequiredFields =
    { id : ScalarCodecs.Uuid
    , name : String
    , displayName : String
    }


type alias ScopeInputOptionalFields =
    { description : OptionalArgument String
    , resources : OptionalArgument (List String)
    }


{-| Type for the ScopeInput input object.
-}
type alias ScopeInput =
    { id : ScalarCodecs.Uuid
    , name : String
    , displayName : String
    , description : OptionalArgument String
    , resources : OptionalArgument (List String)
    }


{-| Encode a ScopeInput into a value that can be used as an argument.
-}
encodeScopeInput : ScopeInput -> Value
encodeScopeInput input____ =
    Encode.maybeObject
        [ ( "id", (ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ), ( "name", Encode.string input____.name |> Just ), ( "displayName", Encode.string input____.displayName |> Just ), ( "description", Encode.string |> Encode.optional input____.description ), ( "resources", (Encode.string |> Encode.list) |> Encode.optional input____.resources ) ]


buildUserClaimsInput :
    UserClaimsInputRequiredFields
    -> UserClaimsInput
buildUserClaimsInput required____ =
    { userId = required____.userId, claimIds = required____.claimIds }


type alias UserClaimsInputRequiredFields =
    { userId : ScalarCodecs.Uuid
    , claimIds : List ScalarCodecs.Uuid
    }


{-| Type for the UserClaimsInput input object.
-}
type alias UserClaimsInput =
    { userId : ScalarCodecs.Uuid
    , claimIds : List ScalarCodecs.Uuid
    }


{-| Encode a UserClaimsInput into a value that can be used as an argument.
-}
encodeUserClaimsInput : UserClaimsInput -> Value
encodeUserClaimsInput input____ =
    Encode.maybeObject
        [ ( "userId", (ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.userId |> Just ), ( "claimIds", ((ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) |> Encode.list) input____.claimIds |> Just ) ]


buildUserInput :
    UserInputRequiredFields
    -> UserInput
buildUserInput required____ =
    { userId = required____.userId, email = required____.email, phoneNumber = required____.phoneNumber, twoFactorEnabled = required____.twoFactorEnabled }


type alias UserInputRequiredFields =
    { userId : ScalarCodecs.Uuid
    , email : String
    , phoneNumber : String
    , twoFactorEnabled : Bool
    }


{-| Type for the UserInput input object.
-}
type alias UserInput =
    { userId : ScalarCodecs.Uuid
    , email : String
    , phoneNumber : String
    , twoFactorEnabled : Bool
    }


{-| Encode a UserInput into a value that can be used as an argument.
-}
encodeUserInput : UserInput -> Value
encodeUserInput input____ =
    Encode.maybeObject
        [ ( "userId", (ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.userId |> Just ), ( "email", Encode.string input____.email |> Just ), ( "phoneNumber", Encode.string input____.phoneNumber |> Just ), ( "twoFactorEnabled", Encode.bool input____.twoFactorEnabled |> Just ) ]
