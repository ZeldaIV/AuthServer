{-
   AuthServer API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: v1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( ApiResource, ApiResourceSecrets(..), ApiResourceScopes(..), ApiResourceUserClaims(..), ApiResourceProperties(..)
    , ApiResourceClaim, ApiResourceClaimApiResource(..)
    , ApiResourceProperty, ApiResourcePropertyApiResource(..)
    , ApiResourceScope, ApiResourceScopeApiResource(..)
    , ApiResourceSecret, ApiResourceSecretApiResource(..)
    , LoginRequest
    , LogoutInputModel
    , encodeApiResource
    , encodeApiResourceClaim
    , encodeApiResourceProperty
    , encodeApiResourceScope
    , encodeApiResourceSecret
    , encodeLoginRequest
    , encodeLogoutInputModel
    , apiResourceDecoder
    , apiResourceClaimDecoder
    , apiResourcePropertyDecoder
    , apiResourceScopeDecoder
    , apiResourceSecretDecoder
    , loginRequestDecoder
    , logoutInputModelDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias ApiResource =
    { id : Maybe Int
    , enabled : Maybe Bool
    , name : Maybe String
    , displayName : Maybe String
    , description : Maybe String
    , allowedAccessTokenSigningAlgorithms : Maybe String
    , showInDiscoveryDocument : Maybe Bool
    , secrets : ApiResourceSecrets
    , scopes : ApiResourceScopes
    , userClaims : ApiResourceUserClaims
    , properties : ApiResourceProperties
    , created : Maybe Posix
    , updated : Maybe Posix
    , lastAccessed : Maybe Posix
    , nonEditable : Maybe Bool
    }


type ApiResourceSecrets = ApiResourceSecrets (Maybe (List (ApiResourceSecret)))


unwrapApiResourceSecrets : ApiResourceSecrets -> Maybe (List (ApiResourceSecret))
unwrapApiResourceSecrets (ApiResourceSecrets secrets) = secrets


type ApiResourceScopes = ApiResourceScopes (Maybe (List (ApiResourceScope)))


unwrapApiResourceScopes : ApiResourceScopes -> Maybe (List (ApiResourceScope))
unwrapApiResourceScopes (ApiResourceScopes scopes) = scopes


type ApiResourceUserClaims = ApiResourceUserClaims (Maybe (List (ApiResourceClaim)))


unwrapApiResourceUserClaims : ApiResourceUserClaims -> Maybe (List (ApiResourceClaim))
unwrapApiResourceUserClaims (ApiResourceUserClaims userClaims) = userClaims


type ApiResourceProperties = ApiResourceProperties (Maybe (List (ApiResourceProperty)))


unwrapApiResourceProperties : ApiResourceProperties -> Maybe (List (ApiResourceProperty))
unwrapApiResourceProperties (ApiResourceProperties properties) = properties


type alias ApiResourceClaim =
    { id : Maybe Int
    , type_ : Maybe String
    , apiResourceId : Maybe Int
    , apiResource : ApiResourceClaimApiResource
    }


type ApiResourceClaimApiResource = ApiResourceClaimApiResource (Maybe ApiResource)


unwrapApiResourceClaimApiResource : ApiResourceClaimApiResource -> Maybe ApiResource
unwrapApiResourceClaimApiResource (ApiResourceClaimApiResource apiResource) = apiResource


type alias ApiResourceProperty =
    { id : Maybe Int
    , key : Maybe String
    , value : Maybe String
    , apiResourceId : Maybe Int
    , apiResource : ApiResourcePropertyApiResource
    }


type ApiResourcePropertyApiResource = ApiResourcePropertyApiResource (Maybe ApiResource)


unwrapApiResourcePropertyApiResource : ApiResourcePropertyApiResource -> Maybe ApiResource
unwrapApiResourcePropertyApiResource (ApiResourcePropertyApiResource apiResource) = apiResource


type alias ApiResourceScope =
    { id : Maybe Int
    , scope : Maybe String
    , apiResourceId : Maybe Int
    , apiResource : ApiResourceScopeApiResource
    }


type ApiResourceScopeApiResource = ApiResourceScopeApiResource (Maybe ApiResource)


unwrapApiResourceScopeApiResource : ApiResourceScopeApiResource -> Maybe ApiResource
unwrapApiResourceScopeApiResource (ApiResourceScopeApiResource apiResource) = apiResource


type alias ApiResourceSecret =
    { id : Maybe Int
    , description : Maybe String
    , value : Maybe String
    , expiration : Maybe Posix
    , type_ : Maybe String
    , created : Maybe Posix
    , apiResourceId : Maybe Int
    , apiResource : ApiResourceSecretApiResource
    }


type ApiResourceSecretApiResource = ApiResourceSecretApiResource (Maybe ApiResource)


unwrapApiResourceSecretApiResource : ApiResourceSecretApiResource -> Maybe ApiResource
unwrapApiResourceSecretApiResource (ApiResourceSecretApiResource apiResource) = apiResource


type alias LoginRequest =
    { username : Maybe String
    , password : Maybe String
    , returnUrl : Maybe String
    }


type alias LogoutInputModel =
    { logoutId : Maybe String
    }


-- ENCODER


encodeApiResource : ApiResource -> Json.Encode.Value
encodeApiResource =
    encodeObject << encodeApiResourcePairs


encodeApiResourceWithTag : ( String, String ) -> ApiResource -> Json.Encode.Value
encodeApiResourceWithTag (tagField, tag) model =
    encodeObject (encodeApiResourcePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiResourcePairs : ApiResource -> List EncodedField
encodeApiResourcePairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "enabled" Json.Encode.bool model.enabled
            , maybeEncodeNullable "name" Json.Encode.string model.name
            , maybeEncodeNullable "displayName" Json.Encode.string model.displayName
            , maybeEncodeNullable "description" Json.Encode.string model.description
            , maybeEncodeNullable "allowedAccessTokenSigningAlgorithms" Json.Encode.string model.allowedAccessTokenSigningAlgorithms
            , maybeEncode "showInDiscoveryDocument" Json.Encode.bool model.showInDiscoveryDocument
            , maybeEncodeNullable "secrets" (Json.Encode.list encodeApiResourceSecret) <| unwrapApiResourceSecrets model.secrets
            , maybeEncodeNullable "scopes" (Json.Encode.list encodeApiResourceScope) <| unwrapApiResourceScopes model.scopes
            , maybeEncodeNullable "userClaims" (Json.Encode.list encodeApiResourceClaim) <| unwrapApiResourceUserClaims model.userClaims
            , maybeEncodeNullable "properties" (Json.Encode.list encodeApiResourceProperty) <| unwrapApiResourceProperties model.properties
            , maybeEncode "created" Api.Time.encodeDateTime model.created
            , maybeEncodeNullable "updated" Api.Time.encodeDateTime model.updated
            , maybeEncodeNullable "lastAccessed" Api.Time.encodeDateTime model.lastAccessed
            , maybeEncode "nonEditable" Json.Encode.bool model.nonEditable
            ]
    in
    pairs


encodeApiResourceClaim : ApiResourceClaim -> Json.Encode.Value
encodeApiResourceClaim =
    encodeObject << encodeApiResourceClaimPairs


encodeApiResourceClaimWithTag : ( String, String ) -> ApiResourceClaim -> Json.Encode.Value
encodeApiResourceClaimWithTag (tagField, tag) model =
    encodeObject (encodeApiResourceClaimPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiResourceClaimPairs : ApiResourceClaim -> List EncodedField
encodeApiResourceClaimPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncodeNullable "type" Json.Encode.string model.type_
            , maybeEncode "apiResourceId" Json.Encode.int model.apiResourceId
            , maybeEncode "apiResource" encodeApiResource <| unwrapApiResourceClaimApiResource model.apiResource
            ]
    in
    pairs


encodeApiResourceProperty : ApiResourceProperty -> Json.Encode.Value
encodeApiResourceProperty =
    encodeObject << encodeApiResourcePropertyPairs


encodeApiResourcePropertyWithTag : ( String, String ) -> ApiResourceProperty -> Json.Encode.Value
encodeApiResourcePropertyWithTag (tagField, tag) model =
    encodeObject (encodeApiResourcePropertyPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiResourcePropertyPairs : ApiResourceProperty -> List EncodedField
encodeApiResourcePropertyPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncodeNullable "key" Json.Encode.string model.key
            , maybeEncodeNullable "value" Json.Encode.string model.value
            , maybeEncode "apiResourceId" Json.Encode.int model.apiResourceId
            , maybeEncode "apiResource" encodeApiResource <| unwrapApiResourcePropertyApiResource model.apiResource
            ]
    in
    pairs


encodeApiResourceScope : ApiResourceScope -> Json.Encode.Value
encodeApiResourceScope =
    encodeObject << encodeApiResourceScopePairs


encodeApiResourceScopeWithTag : ( String, String ) -> ApiResourceScope -> Json.Encode.Value
encodeApiResourceScopeWithTag (tagField, tag) model =
    encodeObject (encodeApiResourceScopePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiResourceScopePairs : ApiResourceScope -> List EncodedField
encodeApiResourceScopePairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncodeNullable "scope" Json.Encode.string model.scope
            , maybeEncode "apiResourceId" Json.Encode.int model.apiResourceId
            , maybeEncode "apiResource" encodeApiResource <| unwrapApiResourceScopeApiResource model.apiResource
            ]
    in
    pairs


encodeApiResourceSecret : ApiResourceSecret -> Json.Encode.Value
encodeApiResourceSecret =
    encodeObject << encodeApiResourceSecretPairs


encodeApiResourceSecretWithTag : ( String, String ) -> ApiResourceSecret -> Json.Encode.Value
encodeApiResourceSecretWithTag (tagField, tag) model =
    encodeObject (encodeApiResourceSecretPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiResourceSecretPairs : ApiResourceSecret -> List EncodedField
encodeApiResourceSecretPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncodeNullable "description" Json.Encode.string model.description
            , maybeEncodeNullable "value" Json.Encode.string model.value
            , maybeEncodeNullable "expiration" Api.Time.encodeDateTime model.expiration
            , maybeEncodeNullable "type" Json.Encode.string model.type_
            , maybeEncode "created" Api.Time.encodeDateTime model.created
            , maybeEncode "apiResourceId" Json.Encode.int model.apiResourceId
            , maybeEncode "apiResource" encodeApiResource <| unwrapApiResourceSecretApiResource model.apiResource
            ]
    in
    pairs


encodeLoginRequest : LoginRequest -> Json.Encode.Value
encodeLoginRequest =
    encodeObject << encodeLoginRequestPairs


encodeLoginRequestWithTag : ( String, String ) -> LoginRequest -> Json.Encode.Value
encodeLoginRequestWithTag (tagField, tag) model =
    encodeObject (encodeLoginRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLoginRequestPairs : LoginRequest -> List EncodedField
encodeLoginRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "username" Json.Encode.string model.username
            , maybeEncodeNullable "password" Json.Encode.string model.password
            , maybeEncodeNullable "returnUrl" Json.Encode.string model.returnUrl
            ]
    in
    pairs


encodeLogoutInputModel : LogoutInputModel -> Json.Encode.Value
encodeLogoutInputModel =
    encodeObject << encodeLogoutInputModelPairs


encodeLogoutInputModelWithTag : ( String, String ) -> LogoutInputModel -> Json.Encode.Value
encodeLogoutInputModelWithTag (tagField, tag) model =
    encodeObject (encodeLogoutInputModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLogoutInputModelPairs : LogoutInputModel -> List EncodedField
encodeLogoutInputModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "logoutId" Json.Encode.string model.logoutId
            ]
    in
    pairs


-- DECODER


apiResourceDecoder : Json.Decode.Decoder ApiResource
apiResourceDecoder =
    Json.Decode.succeed ApiResource
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "enabled" Json.Decode.bool Nothing
        |> maybeDecodeNullable "name" Json.Decode.string Nothing
        |> maybeDecodeNullable "displayName" Json.Decode.string Nothing
        |> maybeDecodeNullable "description" Json.Decode.string Nothing
        |> maybeDecodeNullable "allowedAccessTokenSigningAlgorithms" Json.Decode.string Nothing
        |> maybeDecode "showInDiscoveryDocument" Json.Decode.bool Nothing
        |> maybeDecodeNullableLazy ApiResourceSecrets "secrets" (Json.Decode.list (Json.Decode.lazy (\_ -> apiResourceSecretDecoder))) Nothing
        |> maybeDecodeNullableLazy ApiResourceScopes "scopes" (Json.Decode.list (Json.Decode.lazy (\_ -> apiResourceScopeDecoder))) Nothing
        |> maybeDecodeNullableLazy ApiResourceUserClaims "userClaims" (Json.Decode.list (Json.Decode.lazy (\_ -> apiResourceClaimDecoder))) Nothing
        |> maybeDecodeNullableLazy ApiResourceProperties "properties" (Json.Decode.list (Json.Decode.lazy (\_ -> apiResourcePropertyDecoder))) Nothing
        |> maybeDecode "created" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "updated" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "lastAccessed" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "nonEditable" Json.Decode.bool Nothing


apiResourceClaimDecoder : Json.Decode.Decoder ApiResourceClaim
apiResourceClaimDecoder =
    Json.Decode.succeed ApiResourceClaim
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecodeNullable "type" Json.Decode.string Nothing
        |> maybeDecode "apiResourceId" Json.Decode.int Nothing
        |> maybeDecodeLazy ApiResourceClaimApiResource "apiResource" (Json.Decode.lazy (\_ -> apiResourceDecoder)) Nothing


apiResourcePropertyDecoder : Json.Decode.Decoder ApiResourceProperty
apiResourcePropertyDecoder =
    Json.Decode.succeed ApiResourceProperty
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecodeNullable "key" Json.Decode.string Nothing
        |> maybeDecodeNullable "value" Json.Decode.string Nothing
        |> maybeDecode "apiResourceId" Json.Decode.int Nothing
        |> maybeDecodeLazy ApiResourcePropertyApiResource "apiResource" (Json.Decode.lazy (\_ -> apiResourceDecoder)) Nothing


apiResourceScopeDecoder : Json.Decode.Decoder ApiResourceScope
apiResourceScopeDecoder =
    Json.Decode.succeed ApiResourceScope
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecodeNullable "scope" Json.Decode.string Nothing
        |> maybeDecode "apiResourceId" Json.Decode.int Nothing
        |> maybeDecodeLazy ApiResourceScopeApiResource "apiResource" (Json.Decode.lazy (\_ -> apiResourceDecoder)) Nothing


apiResourceSecretDecoder : Json.Decode.Decoder ApiResourceSecret
apiResourceSecretDecoder =
    Json.Decode.succeed ApiResourceSecret
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecodeNullable "description" Json.Decode.string Nothing
        |> maybeDecodeNullable "value" Json.Decode.string Nothing
        |> maybeDecodeNullable "expiration" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "type" Json.Decode.string Nothing
        |> maybeDecode "created" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "apiResourceId" Json.Decode.int Nothing
        |> maybeDecodeLazy ApiResourceSecretApiResource "apiResource" (Json.Decode.lazy (\_ -> apiResourceDecoder)) Nothing


loginRequestDecoder : Json.Decode.Decoder LoginRequest
loginRequestDecoder =
    Json.Decode.succeed LoginRequest
        |> maybeDecodeNullable "username" Json.Decode.string Nothing
        |> maybeDecodeNullable "password" Json.Decode.string Nothing
        |> maybeDecodeNullable "returnUrl" Json.Decode.string Nothing


logoutInputModelDecoder : Json.Decode.Decoder LogoutInputModel
logoutInputModelDecoder =
    Json.Decode.succeed LogoutInputModel
        |> maybeDecodeNullable "logoutId" Json.Decode.string Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f