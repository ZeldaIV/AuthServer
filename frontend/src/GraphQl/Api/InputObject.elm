-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAuthorizationInput :
    AuthorizationInputRequiredFields
    -> (AuthorizationInputOptionalFields -> AuthorizationInputOptionalFields)
    -> AuthorizationInput
buildAuthorizationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { application = Absent, status = Absent }
    in
    { id = required____.id, application = optionals____.application, scopes = required____.scopes, status = optionals____.status, subject = required____.subject, creationDate = required____.creationDate, type_ = required____.type_ }


type alias AuthorizationInputRequiredFields =
    { id : Api.ScalarCodecs.Uuid
    , scopes : List (Maybe String)
    , subject : List String
    , creationDate : List String
    , type_ : String
    }


type alias AuthorizationInputOptionalFields =
    { application : OptionalArgument ClientInput
    , status : OptionalArgument String
    }


{-| Type for the AuthorizationInput input object.
-}
type alias AuthorizationInput =
    { id : Api.ScalarCodecs.Uuid
    , application : OptionalArgument ClientInput
    , scopes : List (Maybe String)
    , status : OptionalArgument String
    , subject : List String
    , creationDate : List String
    , type_ : String
    }


{-| Encode a AuthorizationInput into a value that can be used as an argument.
-}
encodeAuthorizationInput : AuthorizationInput -> Value
encodeAuthorizationInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ), ( "application", encodeClientInput |> Encode.optional input____.application ), ( "scopes", (Encode.string |> Encode.maybe |> Encode.list) input____.scopes |> Just ), ( "status", Encode.string |> Encode.optional input____.status ), ( "subject", (Encode.string |> Encode.list) input____.subject |> Just ), ( "creationDate", (Encode.string |> Encode.list) input____.creationDate |> Just ), ( "type", Encode.string input____.type_ |> Just ) ]


buildClientInput :
    ClientInputRequiredFields
    -> (ClientInputOptionalFields -> ClientInputOptionalFields)
    -> ClientInput
buildClientInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientSecret = Absent, permissions = Absent, postLogoutRedirectUris = Absent, redirectUris = Absent, type_ = Absent }
    in
    { clientId = required____.clientId, clientSecret = optionals____.clientSecret, displayName = required____.displayName, permissions = optionals____.permissions, postLogoutRedirectUris = optionals____.postLogoutRedirectUris, redirectUris = optionals____.redirectUris, type_ = optionals____.type_, requirePkce = required____.requirePkce, requireConsent = required____.requireConsent }


type alias ClientInputRequiredFields =
    { clientId : Api.ScalarCodecs.Uuid
    , displayName : String
    , requirePkce : Bool
    , requireConsent : Bool
    }


type alias ClientInputOptionalFields =
    { clientSecret : OptionalArgument String
    , permissions : OptionalArgument (List String)
    , postLogoutRedirectUris : OptionalArgument (List String)
    , redirectUris : OptionalArgument (List String)
    , type_ : OptionalArgument String
    }


{-| Type for the ClientInput input object.
-}
type alias ClientInput =
    { clientId : Api.ScalarCodecs.Uuid
    , clientSecret : OptionalArgument String
    , displayName : String
    , permissions : OptionalArgument (List String)
    , postLogoutRedirectUris : OptionalArgument (List String)
    , redirectUris : OptionalArgument (List String)
    , type_ : OptionalArgument String
    , requirePkce : Bool
    , requireConsent : Bool
    }


{-| Encode a ClientInput into a value that can be used as an argument.
-}
encodeClientInput : ClientInput -> Value
encodeClientInput input____ =
    Encode.maybeObject
        [ ( "clientId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.clientId |> Just ), ( "clientSecret", Encode.string |> Encode.optional input____.clientSecret ), ( "displayName", Encode.string input____.displayName |> Just ), ( "permissions", (Encode.string |> Encode.list) |> Encode.optional input____.permissions ), ( "postLogoutRedirectUris", (Encode.string |> Encode.list) |> Encode.optional input____.postLogoutRedirectUris ), ( "redirectUris", (Encode.string |> Encode.list) |> Encode.optional input____.redirectUris ), ( "type", Encode.string |> Encode.optional input____.type_ ), ( "requirePkce", Encode.bool input____.requirePkce |> Just ), ( "requireConsent", Encode.bool input____.requireConsent |> Just ) ]


buildScopeInput :
    ScopeInputRequiredFields
    -> ScopeInput
buildScopeInput required____ =
    { id = required____.id, name = required____.name, displayName = required____.displayName }


type alias ScopeInputRequiredFields =
    { id : Api.ScalarCodecs.Uuid
    , name : String
    , displayName : String
    }


{-| Type for the ScopeInput input object.
-}
type alias ScopeInput =
    { id : Api.ScalarCodecs.Uuid
    , name : String
    , displayName : String
    }


{-| Encode a ScopeInput into a value that can be used as an argument.
-}
encodeScopeInput : ScopeInput -> Value
encodeScopeInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ), ( "name", Encode.string input____.name |> Just ), ( "displayName", Encode.string input____.displayName |> Just ) ]


buildUserInput :
    UserInputRequiredFields
    -> (UserInputOptionalFields -> UserInputOptionalFields)
    -> UserInput
buildUserInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { email = Absent, phoneNumber = Absent }
    in
    { userName = required____.userName, email = optionals____.email, phoneNumber = optionals____.phoneNumber, twoFactorEnabled = required____.twoFactorEnabled }


type alias UserInputRequiredFields =
    { userName : String
    , twoFactorEnabled : Bool
    }


type alias UserInputOptionalFields =
    { email : OptionalArgument String
    , phoneNumber : OptionalArgument String
    }


{-| Type for the UserInput input object.
-}
type alias UserInput =
    { userName : String
    , email : OptionalArgument String
    , phoneNumber : OptionalArgument String
    , twoFactorEnabled : Bool
    }


{-| Encode a UserInput into a value that can be used as an argument.
-}
encodeUserInput : UserInput -> Value
encodeUserInput input____ =
    Encode.maybeObject
        [ ( "userName", Encode.string input____.userName |> Just ), ( "email", Encode.string |> Encode.optional input____.email ), ( "phoneNumber", Encode.string |> Encode.optional input____.phoneNumber ), ( "twoFactorEnabled", Encode.bool input____.twoFactorEnabled |> Just ) ]
