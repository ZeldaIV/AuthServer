{-
   AuthServer API
   AuthServer Idp

   The version of the OpenAPI document: v1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.LoginRequest exposing (LoginRequest, decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias LoginRequest =
    { username : (Maybe String)
    , password : (Maybe String)
    , returnUrl : (Maybe String)
    }


decoder : Decoder LoginRequest
decoder =
    Decode.succeed LoginRequest
        |> optional "username" (Decode.nullable Decode.string) Nothing
        |> optional "password" (Decode.nullable Decode.string) Nothing
        |> optional "returnUrl" (Decode.nullable Decode.string) Nothing



encode : LoginRequest -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> LoginRequest -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : LoginRequest -> List (String, Encode.Value)
encodePairs model =
    [ ( "username", Maybe.withDefault Encode.null (Maybe.map Encode.string model.username) )
    , ( "password", Maybe.withDefault Encode.null (Maybe.map Encode.string model.password) )
    , ( "returnUrl", Maybe.withDefault Encode.null (Maybe.map Encode.string model.returnUrl) )
    ]



toString : LoginRequest -> String
toString =
    Encode.encode 0 << encode




