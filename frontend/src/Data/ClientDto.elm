{-
   AuthServer API
   AuthServer Idp

   The version of the OpenAPI document: v1

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.ClientDto exposing (ClientDto, decoder, encode, encodeWithTag, toString)

import Uuid exposing (Uuid)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias ClientDto =
    { clientId : Maybe (Uuid)
    , enabled : Maybe (Bool)
    , clientSecrets : (Maybe (List String))
    , allowedGrantTypes : Maybe (Object)
    , redirectUris : (Maybe (List String))
    , allowedScopes : (Maybe (List String))
    , postLogoutRedirectUris : (Maybe (List String))
    }


decoder : Decoder ClientDto
decoder =
    Decode.succeed ClientDto
        |> optional "clientId" (Decode.nullable Uuid.decoder) Nothing
        |> optional "enabled" (Decode.nullable Decode.bool) Nothing
        |> optional "clientSecrets" (Decode.nullable (Decode.list Decode.string)) Nothing
        |> optional "allowedGrantTypes" (Decode.nullable Object.decoder) Nothing
        |> optional "redirectUris" (Decode.nullable (Decode.list Decode.string)) Nothing
        |> optional "allowedScopes" (Decode.nullable (Decode.list Decode.string)) Nothing
        |> optional "postLogoutRedirectUris" (Decode.nullable (Decode.list Decode.string)) Nothing



encode : ClientDto -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> ClientDto -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : ClientDto -> List (String, Encode.Value)
encodePairs model =
    [ ( "clientId", Maybe.withDefault Encode.null (Maybe.map Uuid.encode model.clientId) )
    , ( "enabled", Maybe.withDefault Encode.null (Maybe.map Encode.bool model.enabled) )
    , ( "clientSecrets", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.clientSecrets) )
    , ( "allowedGrantTypes", Maybe.withDefault Encode.null (Maybe.map Object.encode model.allowedGrantTypes) )
    , ( "redirectUris", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.redirectUris) )
    , ( "allowedScopes", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.allowedScopes) )
    , ( "postLogoutRedirectUris", Maybe.withDefault Encode.null (Maybe.map (Encode.list Encode.string) model.postLogoutRedirectUris) )
    ]



toString : ClientDto -> String
toString =
    Encode.encode 0 << encode




